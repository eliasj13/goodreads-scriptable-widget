{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-gray",
    "glyph" : "book-open"
  },
  "name" : "goodreads-scriptable-widget",
  "script" : "let widget = await createWidget()\nif (config.runsInWidget) {\n  widget.url = \"goodreads:\/\/\"\n  Script.setWidget(widget)\n} else {\n  widget.presentMedium()\n}\nScript.complete()\n\nasync function createWidget() {\n  const books = await fetchBooks()\n  const w = new ListWidget()\n  w.setPadding(8, 8, 8, 8)\n  w.backgroundColor = Color.dynamic(new Color(\"#EDE8DF\"), new Color(\"#1C1C1E\"))\n\n  const stack = w.addStack()\n  stack.layoutHorizontally()\n  stack.centerAlignContent()\n  stack.spacing = 12\n\n  \/\/ Change this number to control how many books to show at maximum\n  const maxBooks = Math.min(3, books.length)\n\n  for (let i = 0; i < maxBooks; i++) {\n    const book = books[i]\n    const bookStack = stack.addStack()\n    bookStack.layoutVertically()\n    bookStack.backgroundColor = Color.dynamic(new Color(\"#D4CCC0\"), new Color(\"#2C2C2E\"))\n    bookStack.cornerRadius = 12\n    bookStack.setPadding(6, 6, 6, 6)\n    bookStack.centerAlignContent()\n    bookStack.size = new Size(92, 144)\n\n    const imgReq = new Request(book.coverImage)\n    const img = await imgReq.loadImage()\n    const imgStack = bookStack.addStack()\n    imgStack.centerAlignContent()\n    const imgWidget = imgStack.addImage(img)\n    imgWidget.imageSize = new Size(80, 120)\n    imgWidget.cornerRadius = 8\n    imgWidget.centerAlignImage()\n\n    \/\/ Spacer above progress bar\n    bookStack.addSpacer(5)\n\n    const progressBar = bookStack.addStack()\n    progressBar.size = new Size(80, 6)\n    progressBar.backgroundColor = Color.dynamic(new Color(\"#e0e0e0\"), new Color(\"#555555\"))\n    progressBar.cornerRadius = 5\n\n    const progressFillWidth = Math.floor((book.progress \/ 100) * 80)\n    const fill = progressBar.addStack()\n    fill.size = new Size(progressFillWidth, 6)\n    fill.backgroundColor = Color.dynamic(new Color(\"#4CAF50\"), new Color(\"#7FDB93\"))\n    fill.cornerRadius = 5\n\n    \/\/ This spacer ensures the progress fill doesn't center\n    progressBar.addSpacer()\n  }\n\n  return w\n}\n \nasync function fetchBooks() {\n  const url = \"https:\/\/YOUR-DOMAIN.vercel.app\/currently-reading\"   \/\/ Edit endpoint to \"\/testTwoItems\" or \"\/testThreeItems\" for visual testing\n  try {\n    const req = new Request(url)\n    const books = await req.loadJSON()\n    return books\n  } catch (e) {\n    console.error(e)\n    return []\n  }\n}\n\nfunction truncate(str, n) {\n  return str.length > n ? str.slice(0, n - 1) + \"â€¦\" : str\n}",
  "share_sheet_inputs" : [

  ]
}